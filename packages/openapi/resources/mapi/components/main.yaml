openapi: 3.1.1
info:
  title: Storyblok Components API
  version: 1.0.0
  description: API for managing Storyblok components
servers:
  $ref: ../shared/servers.yaml
security:
  $ref: ../shared/security.yaml
paths:
  /v1/spaces/{space_id}/components:
    description: A component is a standalone entity that is meaningful in its own right. While components (or bloks) can be nested in each other, semantically they remain equal. Each component is a small piece of your data structure which can be filled with content. One component can consist of as many field types as required. The components endpoint allows you to retrieve, add, update, or delete components.
    get:
      operationId: list
      summary: Retrieve Multiple Components
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - $ref: ../shared/pagination.yaml#/page
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          description: Number of components per page. Default is 25, maximum is 100.
        - name: by_ids
          in: query
          required: false
          schema:
            type: string
          description: Filter by ids (comma separated)
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
          description: Components can be sorted in an ascending or descending order by a specific property
        - name: is_root
          in: query
          required: false
          schema:
            type: boolean
          description: Retrieve all the components based on is_root property of a component
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search by name or display_name
        - name: in_group
          in: query
          required: false
          schema:
            type: string
          description: Find components that are present in a specific group with the UUID of the group
        - name: with_tags
          in: query
          required: false
          schema:
            type: string
          description: Filter components by tags
        - name: by_metadata_app_slug
          in: query
          required: false
          schema:
            type: string
          description: Filter components by metadata app slug
        - name: by_metadata_frame_id
          in: query
          required: false
          schema:
            type: string
          description: Filter components by metadata frame ID
      responses:
        '200':
          description: List of components
          content:
            application/json:
              schema:
                type: object
                properties:
                  components:
                    type: array
                    items:
                      $ref: '#/components/schemas/Component'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Space not found
    post:
      operationId: create
      summary: Create a Component
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                component:
                  $ref: '#/components/schemas/Component'
      responses:
        '201':
          description: Component created
          content:
            application/json:
              schema:
                type: object
                properties:
                  component:
                    $ref: '#/components/schemas/Component'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Space not found
  /v1/spaces/{space_id}/components/{component_id}:
    description: Manage a specific component by its ID. Retrieve, update, or delete individual components and their configurations.
    get:
      operationId: get
      summary: Retrieve One Component
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - $ref: ../shared/parameters.yaml#/component_id
      responses:
        '200':
          description: Component details
          content:
            application/json:
              schema:
                type: object
                properties:
                  component:
                    $ref: '#/components/schemas/Component'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component not found
    put:
      operationId: update
      summary: Update a Component
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - $ref: ../shared/parameters.yaml#/component_id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                component:
                  $ref: '#/components/schemas/Component'
                update_content:
                  type: boolean
                  description: Update component name in stories when component name changes
      responses:
        '200':
          description: Component updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  component:
                    $ref: '#/components/schemas/Component'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component not found
    delete:
      operationId: deleteComponent
      summary: Delete a Component
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - $ref: ../shared/parameters.yaml#/component_id
      responses:
        '200':
          description: Component deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  component:
                    $ref: '#/components/schemas/Component'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component not found
  /v1/spaces/{space_id}/components/{component_id}/rename_attribute:
    post:
      operationId: renameAttribute
      summary: Rename Component Attribute
      description: Rename an attribute within a component's schema
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - $ref: ../shared/parameters.yaml#/component_id
        - name: old_name
          in: query
          required: true
          schema:
            type: string
          description: Current name of the attribute
        - name: new_name
          in: query
          required: true
          schema:
            type: string
          description: New name for the attribute
        - name: story_id
          in: query
          required: false
          schema:
            type: integer
          description: Optional story ID to update the attribute in a specific story
      responses:
        '204':
          description: Attribute renamed successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component not found
  /v1/spaces/{space_id}/components/{component_id}/restore:
    post:
      operationId: restore
      summary: Restore Component
      description: Restore a component from its last version
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - $ref: ../shared/parameters.yaml#/component_id
      responses:
        '200':
          description: Component restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  component:
                    $ref: '#/components/schemas/Component'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component not found
  /v1/spaces/{space_id}/components/bulk_update:
    post:
      operationId: bulkMove
      summary: Bulk Move Components
      description: Update multiple components' group assignment
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
                - component
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  description: Array of component IDs to update
                component:
                  type: object
                  required:
                    - component_group_id
                  properties:
                    component_group_id:
                      type: integer
                      description: ID of the component group to assign components to
      responses:
        '200':
          description: Components updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component group not found
  /v1/spaces/{space_id}/versions:
    description: Retrieve component versions. This endpoint's response is paginated.
    get:
      operationId: versions
      summary: Retrieve Component Versions
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            default: 25
            maximum: 100
          description: Number of versions per page
        - name: model
          in: query
          required: false
          schema: 
            type: string
            enum: [components, stories]
          description: Model type. Must be 'components' for component versions.
        - name: model_id
          in: query
          required: false
          schema: 
            type: string
          description: Component ID when model is 'components'
        - name: versions_v2
          in: query
          required: false
          schema:
            type: boolean
          description: Use version 2 system for retrieving versions

      responses:
        '200':
          description: Component versions
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        event:
                          type: string
                        created_at:
                          type: string
                        author_id:
                          type: integer
                        item_id:
                          type: integer
                        author:
                          type: string
                        is_draft:
                          type: boolean
                
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component not found
  /v1/spaces/{space_id}/components/{component_id}/component_versions/{version_id}:
    description: Retrieve schema details of a component version.
    get:
      operationId: version
      summary: Retrieve a Single Component Version
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - $ref: ../shared/parameters.yaml#/component_id
        - name: version_id
          in: path
          required: true
          schema:
            type: integer
          description: Version ID of the component
      responses:
        '200':
          description: Component version details
          content:
            application/json:
              schema:
                type: object
                properties:
                  component_version:
                    type: object
                    properties:
                      schema:
                        type: object
                        additionalProperties: true
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component or version not found
  /v1/spaces/{space_id}/versions/{version_id}:
    description: Restore a component to a saved version.
    put:
      operationId: restoreVersion
      summary: Restore a Component Version
      parameters:
        - $ref: ../shared/parameters.yaml#/space_id
        - name: version_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the component version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                model_id:
                  type: string
      responses:
        '200':
          description: Component version restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  component:
                    $ref: '#/components/schemas/Component'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Component or version not found
components:
  securitySchemes:
    $ref: ../shared/security-schemes.yaml#/securitySchemes
  schemas:
    Component:
      $ref: component.yaml
    ComponentVersion:
      type: object
      description: A component version object
      properties:
        schema:
          additionalProperties: true
    ComponentSchemaField:
      type: object
      description: A component schema field object
      properties:
        type:
          type: string
          description: Field type (text, textarea, number, boolean, etc.)
        pos:
          type: integer
          description: Position of the field
        display_name:
          type: string
          description: Human-readable display name
        required:
          type: boolean
          description: Whether the field is required
        regex:
          type: string
          description: Regular expression for validation
        translatable:
          type: boolean
          description: Whether the field is translatable
        description:
          type: string
          description: Field description
        default_value:
          type: string
          description: Default value for the field
        options:
          type: array
          description: Array of datasource entries [{name:"", value:""}]; Effects editor only if source=undefined. For field type option.
          items:
            type: object
            properties:
              _uid:
                type: string
              name:
                type: string
              value:
                type: string
              
        source:
          type: string
          enum: [option, options, custom]
        folder_slug:
          type: string
          description: Folder slug for asset fields
        filetypes:
          type: array
          description: Allowed file types for asset fields
          items:
            type: string
        maximum:
          type: number
          description: Maximum value for number fields
        minimum:
          type: number
          description: Minimum value for number fields
        maxlength:
          type: integer
          description: Maximum length for text fields
        minlength:
          type: integer
          description: Minimum length for text fields
        rich_markdown:
          type: boolean
          description: Whether rich markdown is enabled
        rich_text:
          type: boolean
          description: Whether rich text is enabled
        markdown:
          type: boolean
          description: Whether markdown is enabled
        size:
          type: string
          description: Field size (small, medium, large)
        height:
          type: integer
          description: Field height in pixels
        width:
          type: integer
          description: Field width in pixels
        use_uuid:
          type: boolean
          description: Whether to use UUID for the field
        restrict_content_types:
          type: boolean
          description: Whether to restrict content types
        restrict_components:
          type: boolean
          description: Whether to restrict components
        component_whitelist:
          type: array
          description: List of allowed components
          items:
            type: string
        component_group_whitelist:
          type: array
          description: List of allowed component groups
          items:
            type: string
        maximum_entries:
          type: integer
          description: Maximum number of entries
        minimum_entries:
          type: integer
          description: Minimum number of entries
        restrict_assets:
          type: boolean
          description: Whether to restrict assets
        asset_whitelist:
          type: array
          description: List of allowed asset types
          items:
            type: string
        exclude_empty_option:
          type: boolean
          description: Whether to exclude empty option
        include_empty_option:
          type: boolean
          description: Whether to include empty option
        datasource_slug:
          type: string
          description: Datasource slug for datasource fields
        multiple:
          type: boolean
          description: Whether multiple values are allowed
        custom_css:
          type: string
          description: Custom CSS for the field
        custom_js:
          type: string
          description: Custom JavaScript for the field
        api_connection:
          type: object
          description: API connection configuration
          properties:
            url:
              type: string
              description: API URL
            headers:
              type: object
              description: API headers
            params:
              type: object
              description: API parameters
        fieldset:
          type: object
          description: Fieldset configuration
          properties:
            title:
              type: string
              description: Fieldset title
            description:
              type: string
              description: Fieldset description
            collapsible:
              type: boolean
              description: Whether the fieldset is collapsible
            collapsed:
              type: boolean
              description: Whether the fieldset is collapsed by default
